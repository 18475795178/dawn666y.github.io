<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leaveit on Dawn&#39;s vlog | Personal </title>
    <link>https://dawn666y.github.io/tags/leaveit/</link>
    <description>Recent content in leaveit on Dawn&#39;s vlog | Personal </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 27 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dawn666y.github.io/tags/leaveit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>为博客添加评论系统</title>
      <link>https://dawn666y.github.io/2020/05add-comments-part/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/05add-comments-part/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
准备功课  了解了一下静态博客添加评论应该怎样实现，网上的大多数教程都是调用第三方，常见的有Valine、gitalk、gitment
 Valine 这个试了一下，要支付宝实名认证，还要绑定手机，比较麻烦，我还是更希望自己的互联网身份是匿名的，不考虑这个方案了
需要了解后者选择使用Valine的同学移步姑苏流白&amp;ndash;Hugo Comments
gitalk 和博主的github绑在一起，使用也比较简单，参考这个博主的文章Mogeko&amp;ndash;为 Hugo 添加谈笑风生区 (Gitalk)
gitment 这个很久没维护了，而且据说有github账户安全问题，也不考虑
添加步骤 参考博文：Megeko&amp;ndash;为 Hugo 添加谈笑风生区 (Gitalk)
在下方就可以看到评论区
遇到的问题 我的评论区上方出现一行报错
百度之后才知道是我的页面链接名过长导致的&amp;ndash;gitalk 限制域名长度不超过 50，原因未知，因为包含了中文
而这个链接是被 gitalk 当作 id 写入的，上面我们在配置 config.toml 时填写的 id 那一栏就是指定 gitalk 加载的 id
我的博客会产生这样的链接，是因为我的 markdown 格式的博文是采用中文命名的，hugo 在编译页面的时候会使用文件名作为跳转到博文的链接，修改所有的本地 markdown 博文为非中文名再编译部署就好了
此外，gitalk 需要拥有者初始化每一篇需要搭建评论区的博文，初始化激活的步骤很简单，博主用自己的 github 账户登录一下这篇博文的评论区就可以了。尽管这意味着今后每发表一篇需要评论区的博文就要执行一遍初始化的流程
最终效果 测试评论能否成功，输入以下内容
测试一下刚刚添加的gitalk评论区测试是否支持markdown​```java// 这是代码public class Hello{}​```这是链接：[本博客主页](https://dawn666y.github.io/)这是图片：![表情包](https://raw.githubusercontent.com/Dawn666Y/myPicGo/master/blog/image-20200418134722115.png)编辑模式：
预览模式：
可以点击右下角按钮切换两个模式
评论效果：
评论区就这样搭建完成了</description>
    </item>
    
    <item>
      <title>在博文上方添加阅读条</title>
      <link>https://dawn666y.github.io/2020/04add-read-line/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/04add-read-line/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
在博文上方添加阅读进度条
参考来源 Mogeko的博客为 LeaveIt 主题添加阅读进度条
遇到的问题 hugo 没有编译 scss 文件，我翻了翻文章下面Mogeko前辈的解释才知道自己下载的不是完整版的 hugo
去 GitHub 主页又重新下载了完整版的 hugo hugo release-GitHub
大家根据自己的系统选择对应的版本替换原来的 hugo 即可</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人博客</title>
      <link>https://dawn666y.github.io/2020/01hugo-blog-begin/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/01hugo-blog-begin/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
 安装 hugo 创建博客 网站部署   众所周知受疫情影响，全国大多数同胞宅在家陷入无所事事的状态，本人本着蛋疼找事做的原则尝试搭建一个个人博客以供长期使用
 废话少说！让我们开始吧！
安装 hugo  安装之前需要知道 hugo 是以 golang 编写的一个静态博客搭建框架，所以在开始安装前必须保证电脑上拥有 go 语言的环境，Go 语言安装下载地址Go 官网，版本至少1.11以上，另外部署项目到 Github 上也需要安装 git，最后再安装hugo
 hugo 下载压缩包之后解压目录如下：
 新建一个资源文件夹  位置嘛随便，今后的博文也计划保存在这个文件夹中，再建立一个子文件夹 bin 存放解压出的hugo.exe
  在环境变量中添加 hugo.exe所在目录
要注意分号“;”是英文的
  打开命令行测试 hugo 是否配置成功
  输入命令
&amp;gt; hugo version 像下面这样弹出版本信息那就是 hugo 安装成功啦！恭喜！
创建博客 在 hugo 的安装目录下&amp;ndash;我的是D:\hugo，按住 shift 点鼠标右键 选择在此处打开命令行窗口
输入命令(名字随便起，我输的是 blog)：
hugo new site blog 然后就可以在文件夹里看到 blog，点进去看看结构 (你应该除了 public 都有，那是后话，暂时忽略)</description>
    </item>
    
    <item>
      <title>对博文数据更新再部署</title>
      <link>https://dawn666y.github.io/2020/02hugo-redeployment/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/02hugo-redeployment/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
删除 public 删除 public 目录下除.git以外的所有数据
生成新数据 再次在 blog 文件夹下执行 hugo 的 build 命令重新生成网站数据
hugo --theme=LeaveIt --baseUrl=&amp;#34;https://dawn666y.github.io/&amp;#34; --buildDrafts 提交部署 在 public 文件夹下依次执行
git branch newBranch git checkout newBranch git add . git commit -m &amp;#34;第二次提交&amp;#34; git checkout master git merge newBranch git push -u origin master 简单解释一下
 创建一个新分支 newBranch 切换当前操作分支到新分支 添加数据到新分支 提交数据到新分支 切换当前操作分支到 master 合并新分支到 master 再次 push 部署   新的数据就完成了部署，提醒一下 Github 上的资源缓存更新有点慢，在国内可能需要等待一小段时间，然后强制刷新一下就可以看到更新后的博文啦
 </description>
    </item>
    
  </channel>
</rss>