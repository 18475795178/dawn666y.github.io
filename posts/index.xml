<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dawn&#39;s vlog | Personal </title>
    <link>https://dawn666y.github.io/posts/</link>
    <description>Recent content in Posts on Dawn&#39;s vlog | Personal </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 18 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dawn666y.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>机场使用感受</title>
      <link>https://dawn666y.github.io/2020/%E6%9C%BA%E5%9C%BA%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/%E6%9C%BA%E5%9C%BA%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
本文旨在记录我的机场使用记录供大家参考，后续可能会更新
 我的机场选择历史  棱镜 VPN(已跑路) 忘了名字的 MoCloud 几鸡 Cord Cloud STC-Cloud（在用）   总结 一些人生建议  我的机场选择历史  用过 6 个机场，不打广告，名称分别为棱镜 VPN、忘了名字、MoCloud、几鸡、Cord Cloud、STC-Cloud(现在)，下面挨个总结
 棱镜 VPN(已跑路) 唯一一个我用了个把月就跑路的，这个机场很有特点，套餐是有按小时付费的，一个小时 1 块钱，不限流量，可以说为大一的我打开了新世界的大门，还差点没刹住车。现在已经不会有这样的机场这样的套餐了
没有售后，老板卷钱跑路毫无后顾之忧……还好我没有任何损失
忘了名字的 第二家我忘记名字了，也用了很久，年付套餐不是很贵，一个月 10 块钱的样子，流量嘛……反正我也用不完，售后群还是 QQ 群好奇葩……群名低调：绝地求生吃鸡群，可以说求生欲满满了，人数很少，一两百人的样子
最后觉得太不划算弃掉了，想换一个便宜流量少的，我是渣男
MoCloud 这家算是大型机场了，买了一年，我也第一次开始接触 Telegram，加了群，用户上千还是上万记不清了，当然也有大型机场的通病，那就是挤，高峰期难用，还有就是上边开会搞国际大事的时候，节点线路挂的凶，最后弃了
几鸡 同样是大型机场，同样挂的凶，同样挤，但是当时冲着这家可以解锁流媒体去的，然后我又发现，我买不起 Netflix 会员……更重要的是我买了也没有时间看……再补一句人人影视真香
买了一年现在还没有到期，当备用机场了(其实已经不用了)，这家节点名太有特色了，举个例子：
还不觉得乱对不对，但是这家一直坚持用 SSR，你们看看安卓端的翻墙 app：SSRR 的界面：
哦我忘了，这个 SSRR 不让截图，总之就是乱的一批根本不想看，信息全部堆在一起，密集恐惧症都要犯了，几鸡也有自己的 app，可能好看一点，不过一直用 SSRR 没有体验过
上图为安卓端 SSRR 截图，来自网络
Cord Cloud 老板娘这家也是大型机场稳定运行多年了，我当时看见她家套餐最低 5 元每月，60 包年，此套餐现已下架，就心动了，毕竟这种价位太稀有了，买了 3 个月想试试，也是第一次接触到安卓端除 SSRR 之外的翻墙 app——Clash，界面不知道比 SSRR 好看到哪里去了：(图中节点均来自 STC-Cloud 并非 Cord Cloud)</description>
    </item>
    
    <item>
      <title>选择哪家机场翻墙？</title>
      <link>https://dawn666y.github.io/2020/%E9%80%89%E6%8B%A9%E5%93%AA%E5%AE%B6%E6%9C%BA%E5%9C%BA%E7%BF%BB%E5%A2%99/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/%E9%80%89%E6%8B%A9%E5%93%AA%E5%AE%B6%E6%9C%BA%E5%9C%BA%E7%BF%BB%E5%A2%99/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
本文主要讨论翻墙 3 年来使用过的机场，总结一些经验，科普向
 什么是机场？  GFW 的诞生 梯子的诞生 个人搭建梯子的缺陷   机场主要做什么  主要功能 特别服务   我应该选择哪个机场？  什么是机场？ 要回答这个问题，我们要简单说一下中国互联网历史
GFW 的诞生 中国国家防火墙——以下简称 GFW，Great Firewall（GFW&amp;ndash;维基百科），诞生自 1998 年，以 2009 年谷歌中国在大陆地区(不含港澳台)停止服务的事件为代表，是中国政府对大陆地区的互联网内容的大审查，属于公权力对大陆用户可以访问到的互联网内容的管制，同时也有一定的积极意义(尽管并非初衷)，即保护与发展本土新兴互联网产业，避免被国际主流商业势力瓜分土壤与市场
被墙知名网站：Google、Facebook、YouTube、Instagram、WhatsApp、Telegram等等，其中甚至也包括大量的学术网站
梯子的诞生 ~~不过上有政策下有对策，~~网络大神们利用已有的协议与工具实现了对 GFW 的封锁突破，最早期最知名的工具代表就是VPN了，不过现在已经没有人使用。其原理就是利用境外的服务器进行网站访问，将用户需要翻墙的设备的网络数据包全部转发到境外的服务器上，从那里发起对目标地址的请求，再将请求返回的数据转发回用户的设备，实现越过 GFW 的审查机制以访问外网。
这就是最早期的梯子
VPN 因为一些特殊原因已被翻墙的技术党淘汰——注意这项技术并没有淘汰，只是翻墙不再使用，我们现在在移动设备上通知栏看到的 VPN 图标并不一定代表 VPN 协议，现在我们主流使用的工具有 SS、SSR、V2Ray、Trojan 等等。
个人搭建梯子的缺陷 前面提到的大神提供的翻墙方法存在着一些问题，我们选择境外的服务器可能会被 GFW 日新月异的屏蔽技术封锁起来，也就是个人需要承担境外服务器会像境外网站一样被 GFW 墙掉的风险，那么就需要定期的更换服务器，这就需要使用者有一定的技术水平，能够独立完成这样的维护任务，这又是一笔时间成本开销，还要加上购买与更换服务器的经济成本开销，这样的门槛劝退了很多互联网技术小白，那么有没有什么方式可以减少开销呢？
  减少时间成本开销
把维护和更换服务器的工作转换成经济开销，也就是找付费机场，让机场主帮你完成
  减少经济成本开销
不翻墙就好了，别打我
  所以机场诞生了，机场就是私人运营的梯子站点，我们无需再承担服务器被墙的风险，只需要按照一定的流程购买使用机场提供的梯子就可以了。
机场主要做什么 主要功能   搭建维护境外服务器</description>
    </item>
    
    <item>
      <title>设计毕设预约挂号系统中遇到的问题</title>
      <link>https://dawn666y.github.io/2020/%E8%AE%BE%E8%AE%A1%E6%AF%95%E8%AE%BE%E9%A2%84%E7%BA%A6%E6%8C%82%E5%8F%B7%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/%E8%AE%BE%E8%AE%A1%E6%AF%95%E8%AE%BE%E9%A2%84%E7%BA%A6%E6%8C%82%E5%8F%B7%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
本文旨在描述搭建毕设的过程中遇到的困难与解决方案，为论文与 PPT 提供一些思路
 相信多年后的我看到当初这样的自己也会觉得羞愧难当—— 怎么当初就犯了这么沙雕的错误呢？！
本文纯属想到哪里写到哪里，算是毕设大体完成后的总结
  layui  前端我真的不熟悉，HTML+CSS+JavaScript 的功课没有好好学吃了大亏，想着使用对后端程序员十分友好的 layui 兴许可以缓解尴尬的场面，然后我还是被前端血虐，下面就看看我都犯过什么愚蠢的错误 top 很多……
   渲染 select 下拉框出错
众所周知，layui 中的下拉框渲染是跟着 form 标签一起的，在 js 中也是使用form.render(&#39;selector&#39;)的语法来完成下拉框样式的渲染，可我偏偏忽视了这一点，select 标签孤零零站在寒风中没有被 form 抱住，然后渲染肯定是失败啦……
教训：layui 渲染的 select 下拉框一定要包含在 form 标签内
  标签内 onclick=&amp;quot;fucntion()&amp;ldquo;属性不起作用
想在按钮点击的时候触发一个点击事件，我一直使用 layui 自带的 jQuery，所以函数要写在 layui 函数内部，但是点击事件怎么都不起作用，经过一番学习 百度之后才了解 layui 内部的函数不能在外面直接调用
教训：layui 内部的函数想要在外部调用就必须使用 window.函数名 = function(){} 的方式声明
  自定义的发送 post 后端验证的 lay-verify 不起作用
在用户修改密码的页面中，想要验证用户输入的旧密码是否正确就尝试加一个自己的表单验证，在验证函数里发送 ajax 请求来验证数据是否合法，但是每次点击提交按钮之后，验证都没有执行，调试一番后发现，表单总是先一步提交，而验证的方法总是后一步执行，只能归咎与我对 ajax、layui 的 API 还不够熟悉，解决方案就是在提交表单时嵌套一次验证， 验证通过之后再提交整个表单</description>
    </item>
    
    <item>
      <title>一个医师排班算法的实现</title>
      <link>https://dawn666y.github.io/2020/%E4%B8%80%E4%B8%AA%E5%8C%BB%E5%B8%88%E6%8E%92%E7%8F%AD%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/%E4%B8%80%E4%B8%AA%E5%8C%BB%E5%B8%88%E6%8E%92%E7%8F%AD%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
本文旨在实现一个智能排班的算法
 需求分析 所需数据 项目落地 算法设计 总结   毕设项目中核心需求是要根据医师的手术、请假、已预约时间还有医师的级别来进行自动排班，也是毕设中最具难度的一个需求
  需求分析  用户要选择医师进行预约时，查询出该医师的排班时间，可用则显示**“可预约”**，否则不显示 医院查询各个科室下的排班情况，显示对应时间段是谁在坐诊 医师可以查询到自己的排班情况 查询的时限都是当天起未来一周 （即今日周一，则最远可查询到下周一）   所需数据  医师的 ID 医师的级别 手术或者请假的安排   项目落地   前台传来医师 ID或者科室 ID
 医院可以根据科室 ID 查看不同科室的排班表，而医生只能查询自己科室的排班表，最后用户根据医师 ID 和科室 ID 查询医师的个人排班表
 我的项目后台可以查询到发送查询请求的这个用户是医院、医师还是患者，所以判断查询科室排班还是医师排班不难
  根据科室 ID 查询科室下的所有医师
  提取关键医师信息，初始化一个数组表示医师时间表，把这些封装暂存
  按照医师级别进行分组，将级别相同的医师存入同一 List
    根据每个医生 ID 查询请假表，获取手术或者请假的安排，根据请假表将对应医师的对应时间段置 0
  根据各个医师的排班表完成科室的排班，优先选择高级别的医师填充科室排班表</description>
    </item>
    
    <item>
      <title>一个仓库管理系统的实现</title>
      <link>https://dawn666y.github.io/2020/%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
 仓库管理系统的搭建  1. 项目前台模版的修改  1.1. 替换 layuicms 中的 layui 版本 1.2. 查看页面是否导入成功 1.3. 删除 index 不需要的内容 1.4. 修改工作台 page/main.html   2. 搭建 Spring Boot 项目  2.1. 引入依赖 2.2. yaml 配置 2.3. 实现登录功能  2.3.1. 代码生成 2.3.2. 创建 ActiveUser 类 2.3.3. 创建 UserRealm 2.3.4. 配置 shiro 2.3.5. 编写 LoginController 2.3.6. 修改前台页面代码   2.4. 生成菜单  2.4.1. 代码生成 2.4.2. 建立 DataGridView 类 2.4.3. 处理数据转换成 json 2.</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人博客</title>
      <link>https://dawn666y.github.io/2020/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
 安装 hugo 创建博客 网站部署   众所周知受疫情影响，全国大多数同胞宅在家陷入无所事事的状态，本人本着蛋疼找事做的原则尝试搭建一个个人博客以供长期使用
 废话少说！让我们开始吧！
安装 hugo  安装之前需要知道 hugo 是以 golang 编写的一个静态博客搭建框架，所以在开始安装前必须保证电脑上拥有 go 语言的环境，Go 语言安装下载地址Go 官网，版本至少1.11以上，另外部署项目到 Github 上也需要安装 git，最后再安装hugo
 hugo 下载压缩包之后解压目录如下：
 新建一个资源文件夹  位置嘛随便，今后的博文也计划保存在这个文件夹中，再建立一个子文件夹 bin 存放解压出的hugo.exe
  在环境变量中添加 hugo.exe所在目录
要注意分号“;”是英文的
  打开命令行测试 hugo 是否配置成功
  输入命令
&amp;gt; hugo version 像下面这样弹出版本信息那就是 hugo 安装成功啦！恭喜！
创建博客 在 hugo 的安装目录下&amp;ndash;我的是D:\hugo，按住 shift 点鼠标右键 选择在此处打开命令行窗口
输入命令(名字随便起，我输的是 blog)：
hugo new site blog 然后就可以在文件夹里看到 blog，点进去看看结构 (你应该除了 public 都有，那是后话，暂时忽略)</description>
    </item>
    
    <item>
      <title>对博文数据更新再部署</title>
      <link>https://dawn666y.github.io/2020/%E5%AF%B9%E5%8D%9A%E6%96%87%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E5%86%8D%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dawn666y.github.io/2020/%E5%AF%B9%E5%8D%9A%E6%96%87%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E5%86%8D%E9%83%A8%E7%BD%B2/</guid>
      <description>tips:点击左上角的爱心 ❤️ 可切换夜间模式保护眼睛哦！！
删除 public 删除 public 目录下除.git以外的所有数据
生成新数据 再次在 blog 文件夹下执行 hugo 的 build 命令重新生成网站数据
hugo --theme=LeaveIt --baseUrl=&amp;#34;https://dawn666y.github.io/&amp;#34; --buildDrafts 提交部署 在 public 文件夹下依次执行
git branch newBranch git checkout newBranch git add . git commit -m &amp;#34;第二次提交&amp;#34; git checkout master git merge newBranch git push -u origin master 简单解释一下
 创建一个新分支 newBranch 切换当前操作分支到新分支 添加数据到新分支 提交数据到新分支 切换当前操作分支到 master 合并新分支到 master 再次 push 部署   新的数据就完成了部署，提醒一下 Github 上的资源缓存更新有点慢，在国内可能需要等待一小段时间，然后强制刷新一下就可以看到更新后的博文啦
 </description>
    </item>
    
  </channel>
</rss>